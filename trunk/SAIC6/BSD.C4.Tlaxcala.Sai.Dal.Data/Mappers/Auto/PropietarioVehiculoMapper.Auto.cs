
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 04/08/2009 - 01:50 p.m.
// This is a partial class file. The other one is PropietarioVehiculoMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Entities;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class PropietarioVehiculoMapper : BaseGateway<PropietarioVehiculoObject, PropietarioVehiculoObjectList>, IGenericGateway
    {


        #region "Singleton"

        static PropietarioVehiculoMapper _instance;

        private PropietarioVehiculoMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PropietarioVehiculoMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PropietarioVehiculoMapper();
                else {
                    PropietarioVehiculoMapper inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.PropietarioVehiculoMapperSingleton"] as PropietarioVehiculoMapper;
                    if (inst == null) {
                        inst = new PropietarioVehiculoMapper();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.PropietarioVehiculoMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Clave"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(PropietarioVehiculoObject);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "PropietarioVehiculo"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(PropietarioVehiculoMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PropietarioVehiculoObject entity)
        {
            
            IMappeablePropietarioVehiculoObject PropietarioVehiculo = (IMappeablePropietarioVehiculoObject)entity;
            PropietarioVehiculo.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(PropietarioVehiculoObject entity)
        {

            IMappeablePropietarioVehiculoObject PropietarioVehiculo = (IMappeablePropietarioVehiculoObject)entity;
            return PropietarioVehiculo.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(PropietarioVehiculoObject entity)
        {

            IMappeablePropietarioVehiculoObject PropietarioVehiculo = (IMappeablePropietarioVehiculoObject)entity;
            return PropietarioVehiculo.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(PropietarioVehiculoObject entity)
        {

            IMappeablePropietarioVehiculoObject PropietarioVehiculo = (IMappeablePropietarioVehiculoObject)entity;
            return PropietarioVehiculo.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(PropietarioVehiculoObject entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeablePropietarioVehiculoObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


          





        /// <summary>
        /// Get a PropietarioVehiculoObject by execute a SQL Query Text
        /// </summary>
        public PropietarioVehiculoObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PropietarioVehiculoObjectList by execute a SQL Query Text
        /// </summary>
        public PropietarioVehiculoObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public PropietarioVehiculoObject GetOne(System.Int32 Clave)
        {
            return base.GetOne(new PropietarioVehiculoObject(Clave));
        }


        // GetOne By Objects and Params
            


        


        

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PropietarioVehiculo_Delete", Clave);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PropietarioVehiculo_Delete", Clave);
        }


        // Delete By Objects and Params
            



        


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class PropietarioVehiculoMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.PropietarioVehiculoMapper Instance()
        {
            return BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.PropietarioVehiculoMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a PropietarioVehiculoEntity by calling a Stored Procedure
        /// </summary>
        public Objects.PropietarioVehiculoObject GetOne(System.Int32 Clave) {
            return Instance().GetOne( Clave);
        }

        // GetBy Objects and Params
            

        

       

            

        
        /// <summary>
        /// Delete PropietarioVehiculo 
        /// </summary>
        public void Delete(System.Int32 Clave){
            Instance().Delete(Clave);
        }

        /// <summary>
        /// Delete PropietarioVehiculoObject 
        /// </summary>
        public void Delete(Objects.PropietarioVehiculoObject entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save PropietarioVehiculoObject  
        /// </summary>
        public void Save(Objects.PropietarioVehiculoObject entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert PropietarioVehiculoObject 
        /// </summary>
        public void Insert(Objects.PropietarioVehiculoObject entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll PropietarioVehiculoObject 
        /// </summary>
        public Objects.PropietarioVehiculoObjectList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save PropietarioVehiculo 
        /// </summary>
        public void Save(System.Int32 Clave, System.String Nombre, System.String Domicilio, System.String Telefono){
            Objects.PropietarioVehiculoObject entity = Instance().GetOne(Clave);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Clave", Clave));

            entity.Nombre = Nombre;
            entity.Domicilio = Domicilio;
            entity.Telefono = Telefono;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert PropietarioVehiculoObject
        /// </summary>
        public void Insert(System.String Nombre, System.String Domicilio, System.String Telefono){
            Objects.PropietarioVehiculoObject entity = new Objects.PropietarioVehiculoObject();

            entity.Nombre = Nombre;
            entity.Domicilio = Domicilio;
            entity.Telefono = Telefono;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class PropietarioVehiculoLoader<T> : BaseLoader< T, PropietarioVehiculoObject, ObjectList<T>>, IGenericGateway where T : PropietarioVehiculoObject, new()
    {

        #region "Singleton"

        static PropietarioVehiculoLoader<T> _instance;

        private PropietarioVehiculoLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PropietarioVehiculoLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PropietarioVehiculoLoader<T>();
                else {
                    PropietarioVehiculoLoader<T> inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.PropietarioVehiculoLoaderSingleton"] as PropietarioVehiculoLoader<T>;
                    if (inst == null) {
                        inst = new PropietarioVehiculoLoader<T>();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.PropietarioVehiculoLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Clave"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(PropietarioVehiculoObject);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "PropietarioVehiculo"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PropietarioVehiculoObject entity)
        {
            
            IMappeablePropietarioVehiculoObject PropietarioVehiculo = (IMappeablePropietarioVehiculoObject)entity;
            PropietarioVehiculo.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        



        /// <summary>
        /// Get a PropietarioVehiculo by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PropietarioVehiculoList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Clave)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "PropietarioVehiculo_GetOne", Clave);
        }


        // GetOne By Objects and Params
            


        


        

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





