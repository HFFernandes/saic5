
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 16/08/2009 - 11:50 a.m.
// This is a partial class file. The other one is DependenciaMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Entities;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class DependenciaMapper : BaseGateway<Dependencia, DependenciaList>, IGenericGateway
    {


        #region "Singleton"

        static DependenciaMapper _instance;

        private DependenciaMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static DependenciaMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new DependenciaMapper();
                else {
                    DependenciaMapper inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.DependenciaMapperSingleton"] as DependenciaMapper;
                    if (inst == null) {
                        inst = new DependenciaMapper();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.DependenciaMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Clave"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Dependencia);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Dependencia"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(DependenciaMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Dependencia entity)
        {
            
            IMappeableDependenciaObject Dependencia = (IMappeableDependenciaObject)entity;
            Dependencia.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(Dependencia entity)
        {

            IMappeableDependenciaObject Dependencia = (IMappeableDependenciaObject)entity;
            return Dependencia.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(Dependencia entity)
        {

            IMappeableDependenciaObject Dependencia = (IMappeableDependenciaObject)entity;
            return Dependencia.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(Dependencia entity)
        {

            IMappeableDependenciaObject Dependencia = (IMappeableDependenciaObject)entity;
            return Dependencia.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Dependencia entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableDependenciaObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Dependencia entity)
        {
            
            ((IMappeableDependencia)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a Dependencia by execute a SQL Query Text
        /// </summary>
        public Dependencia GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a DependenciaList by execute a SQL Query Text
        /// </summary>
        public DependenciaList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public Dependencia GetOne(System.Int32 Clave)
        {
            return base.GetOne(new Dependencia(Clave));
        }


        // GetOne By Objects and Params
            


        


        

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Dependencia_Delete", Clave);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Dependencia_Delete", Clave);
        }


        // Delete By Objects and Params
            



        


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class DependenciaMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.DependenciaMapper Instance()
        {
            return BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.DependenciaMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a DependenciaEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Dependencia GetOne(System.Int32 Clave) {
            return Instance().GetOne( Clave);
        }

        // GetBy Objects and Params
            

        

       

        /// <summary>
        /// Delete children for Dependencia
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Dependencia entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        
        /// <summary>
        /// Delete Dependencia 
        /// </summary>
        public void Delete(System.Int32 Clave){
            Instance().Delete(Clave);
        }

        /// <summary>
        /// Delete Dependencia 
        /// </summary>
        public void Delete(Entities.Dependencia entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Dependencia  
        /// </summary>
        public void Save(Entities.Dependencia entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Dependencia 
        /// </summary>
        public void Insert(Entities.Dependencia entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll Dependencia 
        /// </summary>
        public Entities.DependenciaList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save Dependencia 
        /// </summary>
        public void Save(System.Int32 Clave, System.String Descripcion){
            Entities.Dependencia entity = Instance().GetOne(Clave);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Clave", Clave));

            entity.Descripcion = Descripcion;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Dependencia
        /// </summary>
        public void Insert(System.String Descripcion){
            Entities.Dependencia entity = new Entities.Dependencia();

            entity.Descripcion = Descripcion;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class DependenciaLoader<T> : BaseLoader< T, Dependencia, ObjectList<T>>, IGenericGateway where T : Dependencia, new()
    {

        #region "Singleton"

        static DependenciaLoader<T> _instance;

        private DependenciaLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static DependenciaLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new DependenciaLoader<T>();
                else {
                    DependenciaLoader<T> inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.DependenciaLoaderSingleton"] as DependenciaLoader<T>;
                    if (inst == null) {
                        inst = new DependenciaLoader<T>();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.DependenciaLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Clave"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Dependencia);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Dependencia"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Dependencia entity)
        {
            
            IMappeableDependenciaObject Dependencia = (IMappeableDependenciaObject)entity;
            Dependencia.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableDependencia)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a Dependencia by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a DependenciaList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Clave)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Dependencia_GetOne", Clave);
        }


        // GetOne By Objects and Params
            


        


        

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





