
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 17/08/2009 - 04:24 p.m.
// This is a partial class file. The other one is IncidenciaDependenciaMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Entities;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class IncidenciaDependenciaMapper : BaseGateway<IncidenciaDependencia, IncidenciaDependenciaList>, IGenericGateway
    {


        #region "Singleton"

        static IncidenciaDependenciaMapper _instance;

        private IncidenciaDependenciaMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static IncidenciaDependenciaMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new IncidenciaDependenciaMapper();
                else {
                    IncidenciaDependenciaMapper inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.IncidenciaDependenciaMapperSingleton"] as IncidenciaDependenciaMapper;
                    if (inst == null) {
                        inst = new IncidenciaDependenciaMapper();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.IncidenciaDependenciaMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"ClaveDependencia","Folio"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(IncidenciaDependencia);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "IncidenciaDependencia"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(IncidenciaDependenciaMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, IncidenciaDependencia entity)
        {
            
            IMappeableIncidenciaDependenciaObject IncidenciaDependencia = (IMappeableIncidenciaDependenciaObject)entity;
            IncidenciaDependencia.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(2),
(reader.IsDBNull(3)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(IncidenciaDependencia entity)
        {

            IMappeableIncidenciaDependenciaObject IncidenciaDependencia = (IMappeableIncidenciaDependenciaObject)entity;
            return IncidenciaDependencia.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(IncidenciaDependencia entity)
        {

            IMappeableIncidenciaDependenciaObject IncidenciaDependencia = (IMappeableIncidenciaDependenciaObject)entity;
            return IncidenciaDependencia.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(IncidenciaDependencia entity)
        {

            IMappeableIncidenciaDependenciaObject IncidenciaDependencia = (IMappeableIncidenciaDependenciaObject)entity;
            return IncidenciaDependencia.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(IncidenciaDependencia entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableIncidenciaDependenciaObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(IncidenciaDependencia entity)
        {
            
            ((IMappeableIncidenciaDependencia)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a IncidenciaDependencia by execute a SQL Query Text
        /// </summary>
        public IncidenciaDependencia GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a IncidenciaDependenciaList by execute a SQL Query Text
        /// </summary>
        public IncidenciaDependenciaList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependencia GetOne(System.Int32 ClaveDependencia, System.Int32 Folio)
        {
            return base.GetOne(new IncidenciaDependencia(ClaveDependencia, Folio));
        }


        // GetOne By Objects and Params
                                    
        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependencia GetOne(IUniqueIdentifiable Dependencia, System.Int32 Folio)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(Dependencia, Folio));
        }   
                        


        

        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependenciaList GetByDependencia(DbTransaction transaction, System.Int32 ClaveDependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", ClaveDependencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependenciaList GetByDependencia(DbTransaction transaction, IUniqueIdentifiable Dependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", Dependencia.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependenciaList GetByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependenciaList GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Incidencia.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependenciaList GetByDependencia(System.Int32 ClaveDependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", ClaveDependencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependenciaList GetByDependencia(IUniqueIdentifiable Dependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", Dependencia.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependenciaList GetByIncidencia(System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public IncidenciaDependenciaList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Incidencia.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 ClaveDependencia, System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_Delete", ClaveDependencia, Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 ClaveDependencia, System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_Delete", ClaveDependencia, Folio);
        }


        // Delete By Objects and Params
                                    
        /// <summary>
        /// 
        /// </summary>
        public void Delete(IUniqueIdentifiable Dependencia, System.Int32 Folio)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_Delete",  UniqueIdentifierHelper.ComposeIdentifier(Dependencia, Folio));
        }   
        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, IUniqueIdentifiable Dependencia, System.Int32 Folio)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_Delete",  UniqueIdentifierHelper.ComposeIdentifier(Dependencia, Folio));
        }   
                        



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByDependencia(System.Int32 ClaveDependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByDependencia", ClaveDependencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByDependencia(DbTransaction transaction, System.Int32 ClaveDependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByDependencia", ClaveDependencia);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByDependencia(IUniqueIdentifiable Dependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByDependencia", Dependencia.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByDependencia(DbTransaction transaction, IUniqueIdentifiable Dependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByDependencia", Dependencia.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByIncidencia", Folio);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByIncidencia", Incidencia.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByIncidencia", Incidencia.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class IncidenciaDependenciaMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.IncidenciaDependenciaMapper Instance()
        {
            return BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.IncidenciaDependenciaMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a IncidenciaDependenciaEntity by calling a Stored Procedure
        /// </summary>
        public Entities.IncidenciaDependencia GetOne(System.Int32 ClaveDependencia, System.Int32 Folio) {
            return Instance().GetOne( ClaveDependencia, Folio);
        }

        // GetBy Objects and Params
                                    
        /// <summary>
        /// Get a IncidenciaDependencia  by calling a Stored Procedure
        /// </summary>
        public Entities.IncidenciaDependencia GetOne(IUniqueIdentifiable Dependencia, System.Int32 Folio)
        {
            return Instance().GetOne(Dependencia, Folio);
        }   
                        

        

        /// <summary>
        /// Get a IncidenciaDependenciaList by calling a Stored Procedure
        /// </summary>
        public Entities.IncidenciaDependenciaList GetByDependencia(System.Int32 ClaveDependencia)
        {
            return Instance().GetByDependencia(ClaveDependencia);
        }

        /// <summary>
        /// Get a IncidenciaDependenciaList by calling a Stored Procedure
        /// </summary>
        public Entities.IncidenciaDependenciaList GetByDependencia(IUniqueIdentifiable Dependencia)
        {
            return Instance().GetByDependencia(Dependencia);
        }

    

        /// <summary>
        /// Get a IncidenciaDependenciaList by calling a Stored Procedure
        /// </summary>
        public Entities.IncidenciaDependenciaList GetByIncidencia(System.Int32 Folio)
        {
            return Instance().GetByIncidencia(Folio);
        }

        /// <summary>
        /// Get a IncidenciaDependenciaList by calling a Stored Procedure
        /// </summary>
        public Entities.IncidenciaDependenciaList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return Instance().GetByIncidencia(Incidencia);
        }

    

       

        /// <summary>
        /// Delete children for IncidenciaDependencia
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IncidenciaDependencia entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

                                    

        /// <summary>
        /// Delete IncidenciaDependencia
        /// </summary>
        public void Delete(IUniqueIdentifiable Dependencia, System.Int32 Folio)
        {
            Instance().Delete(Dependencia, Folio);
        }   
                        

        

        /// <summary>
        /// Delete IncidenciaDependencia by Dependencia
        /// </summary>
        public void DeleteByDependencia(System.Int32 ClaveDependencia)
        {
            Instance().DeleteByDependencia(ClaveDependencia);
        }

        /// <summary>
        /// Delete IncidenciaDependencia by Dependencia
        /// </summary>
        public void DeleteByDependencia(IUniqueIdentifiable Dependencia)
        {
            Instance().DeleteByDependencia(Dependencia);
        }

    

        /// <summary>
        /// Delete IncidenciaDependencia by Incidencia
        /// </summary>
        public void DeleteByIncidencia(System.Int32 Folio)
        {
            Instance().DeleteByIncidencia(Folio);
        }

        /// <summary>
        /// Delete IncidenciaDependencia by Incidencia
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            Instance().DeleteByIncidencia(Incidencia);
        }

    
        /// <summary>
        /// Delete IncidenciaDependencia 
        /// </summary>
        public void Delete(System.Int32 ClaveDependencia, System.Int32 Folio){
            Instance().Delete(ClaveDependencia, Folio);
        }

        /// <summary>
        /// Delete IncidenciaDependencia 
        /// </summary>
        public void Delete(Entities.IncidenciaDependencia entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save IncidenciaDependencia  
        /// </summary>
        public void Save(Entities.IncidenciaDependencia entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert IncidenciaDependencia 
        /// </summary>
        public void Insert(Entities.IncidenciaDependencia entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll IncidenciaDependencia 
        /// </summary>
        public Entities.IncidenciaDependenciaList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save IncidenciaDependencia 
        /// </summary>
        public void Save(System.Int32 ClaveDependencia, System.Int32 Folio, System.DateTime FechaNotificacion, System.DateTime FechaEnvioDependencia){
            Entities.IncidenciaDependencia entity = Instance().GetOne(ClaveDependencia, Folio);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}, {2} = {3}", "ClaveDependencia", ClaveDependencia, "Folio", Folio));

            entity.FechaNotificacion = FechaNotificacion;
            entity.FechaEnvioDependencia = FechaEnvioDependencia;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert IncidenciaDependencia
        /// </summary>
        public void Insert(System.Int32 ClaveDependencia, System.Int32 Folio, System.DateTime FechaNotificacion, System.DateTime FechaEnvioDependencia){
            Entities.IncidenciaDependencia entity = new Entities.IncidenciaDependencia();

            entity.ClaveDependencia = ClaveDependencia;
            entity.Folio = Folio;
            entity.FechaNotificacion = FechaNotificacion;
            entity.FechaEnvioDependencia = FechaEnvioDependencia;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class IncidenciaDependenciaLoader<T> : BaseLoader< T, IncidenciaDependencia, ObjectList<T>>, IGenericGateway where T : IncidenciaDependencia, new()
    {

        #region "Singleton"

        static IncidenciaDependenciaLoader<T> _instance;

        private IncidenciaDependenciaLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static IncidenciaDependenciaLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new IncidenciaDependenciaLoader<T>();
                else {
                    IncidenciaDependenciaLoader<T> inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.IncidenciaDependenciaLoaderSingleton"] as IncidenciaDependenciaLoader<T>;
                    if (inst == null) {
                        inst = new IncidenciaDependenciaLoader<T>();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.IncidenciaDependenciaLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"ClaveDependencia","Folio"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(IncidenciaDependencia);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "IncidenciaDependencia"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, IncidenciaDependencia entity)
        {
            
            IMappeableIncidenciaDependenciaObject IncidenciaDependencia = (IMappeableIncidenciaDependenciaObject)entity;
            IncidenciaDependencia.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(2),
(reader.IsDBNull(3)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(3));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableIncidenciaDependencia)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a IncidenciaDependencia by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a IncidenciaDependenciaList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 ClaveDependencia, System.Int32 Folio)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetOne", ClaveDependencia, Folio);
        }


        // GetOne By Objects and Params
                                    
        /// <summary>
        /// 
        /// </summary>
        public T GetOne(IUniqueIdentifiable Dependencia, System.Int32 Folio)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(Dependencia, Folio));
        }   
                        


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByDependencia(DbTransaction transaction, System.Int32 ClaveDependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", ClaveDependencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByDependencia(DbTransaction transaction, IUniqueIdentifiable Dependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", Dependencia.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Incidencia.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByDependencia(System.Int32 ClaveDependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", ClaveDependencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByDependencia(IUniqueIdentifiable Dependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", Dependencia.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Incidencia.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





