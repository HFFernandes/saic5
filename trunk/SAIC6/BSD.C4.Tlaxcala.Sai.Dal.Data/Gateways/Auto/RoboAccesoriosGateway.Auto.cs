
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 8/30/2009 - 1:47 PM
// This is a partial class file. The other one is RoboAccesoriosGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Gateways
{

    public partial class RoboAccesoriosGateway : BaseGateway<RoboAccesoriosObject, RoboAccesoriosObjectList>, IGenericGateway
    {

        #region "Singleton"

        static RoboAccesoriosGateway _instance;

        private RoboAccesoriosGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static RoboAccesoriosGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new RoboAccesoriosGateway();
                else {
                    RoboAccesoriosGateway inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboAccesoriosGatewaySingleton"] as RoboAccesoriosGateway;
                    if (inst == null) {
                        inst = new RoboAccesoriosGateway();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboAccesoriosGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "RoboAccesorios"; }
        }

        protected override string RuleName
        {
            get {return typeof(RoboAccesoriosGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, RoboAccesoriosObject entity)
        {
            
            IMappeableRoboAccesoriosObject RoboAccesorios = (IMappeableRoboAccesoriosObject)entity;
            RoboAccesorios.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1),
(reader.IsDBNull(2)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
reader.GetInt32(4));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(RoboAccesoriosObject entity)
        {

            IMappeableRoboAccesoriosObject RoboAccesorios = (IMappeableRoboAccesoriosObject)entity;
            return RoboAccesorios.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(RoboAccesoriosObject entity)
        {

            IMappeableRoboAccesoriosObject RoboAccesorios = (IMappeableRoboAccesoriosObject)entity;
            return RoboAccesorios.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(RoboAccesoriosObject entity)
        {

            IMappeableRoboAccesoriosObject RoboAccesorios = (IMappeableRoboAccesoriosObject)entity;
            return RoboAccesorios.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(RoboAccesoriosObject row, object[] parameters)
        {
            ((IMappeableRoboAccesoriosObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "rb_";
        }


        /// <summary>
        /// Get a RoboAccesoriosObject by execute a SQL Query Text
        /// </summary>
        public RoboAccesoriosObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a RoboAccesoriosObjectList by execute a SQL Query Text
        /// </summary>
        public RoboAccesoriosObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a RoboAccesoriosObject by calling a Stored Procedure
        /// </summary>
        public RoboAccesoriosObject GetOne(System.Int32 IdRoboAccesorio)
        {
            return base.GetOne(new RoboAccesoriosObject(IdRoboAccesorio));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a RoboAccesoriosObjectList by calling a Stored Procedure
        /// </summary>
        public RoboAccesoriosObjectList GetByIncidencia(DbTransaction transaction,System.Int32 IdIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", IdIncidencia);
        }

        /// <summary>
        /// Get a RoboAccesoriosObjectList by calling a Stored Procedure
        /// </summary>
        public RoboAccesoriosObjectList GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    

        

        /// <summary>
        /// Get a RoboAccesoriosObjectList by calling a Stored Procedure
        /// </summary>
        public RoboAccesoriosObjectList GetByIncidencia(System.Int32 IdIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", IdIncidencia);
        }

        /// <summary>
        /// Get a RoboAccesoriosObjectList by calling a Stored Procedure
        /// </summary>
        public RoboAccesoriosObjectList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    

        /// <summary>
        /// Delete RoboAccesorios
        /// </summary>
        public void Delete(System.Int32 IdRoboAccesorio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_Delete", IdRoboAccesorio);
        }

        /// <summary>
        /// Delete RoboAccesorios
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdRoboAccesorio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_Delete", IdRoboAccesorio);
        }

            

        

        /// <summary>
        /// Delete RoboAccesorios by Incidencia
        /// </summary>
        public void DeleteByIncidencia(System.Int32 IdIncidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_DeleteByIncidencia", IdIncidencia);
        }

        /// <summary>
        /// Delete RoboAccesorios by Incidencia
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, System.Int32 IdIncidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_DeleteByIncidencia", IdIncidencia);
        }

        /// <summary>
        /// Delete RoboAccesorios by Incidencia
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_DeleteByIncidencia", Incidencia.Identifier());
        }

        /// <summary>
        /// Delete RoboAccesorios by Incidencia
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_DeleteByIncidencia", Incidencia.Identifier());
        }


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








