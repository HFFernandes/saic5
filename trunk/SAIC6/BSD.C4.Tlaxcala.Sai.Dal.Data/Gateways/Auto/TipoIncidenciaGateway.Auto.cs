
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 12/08/2009 - 10:21 a.m.
// This is a partial class file. The other one is TipoIncidenciaGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Gateways
{

    public partial class TipoIncidenciaGateway : BaseGateway<TipoIncidenciaObject, TipoIncidenciaObjectList>, IGenericGateway
    {

        #region "Singleton"

        static TipoIncidenciaGateway _instance;

        private TipoIncidenciaGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static TipoIncidenciaGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TipoIncidenciaGateway();
                else {
                    TipoIncidenciaGateway inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.TipoIncidenciaGatewaySingleton"] as TipoIncidenciaGateway;
                    if (inst == null) {
                        inst = new TipoIncidenciaGateway();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.TipoIncidenciaGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "TipoIncidencia"; }
        }

        protected override string RuleName
        {
            get {return typeof(TipoIncidenciaGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, TipoIncidenciaObject entity)
        {
            
            IMappeableTipoIncidenciaObject TipoIncidencia = (IMappeableTipoIncidenciaObject)entity;
            TipoIncidencia.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetInt32(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? new System.Nullable<System.Int32>() : reader.GetInt32(4));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(TipoIncidenciaObject entity)
        {

            IMappeableTipoIncidenciaObject TipoIncidencia = (IMappeableTipoIncidenciaObject)entity;
            return TipoIncidencia.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(TipoIncidenciaObject entity)
        {

            IMappeableTipoIncidenciaObject TipoIncidencia = (IMappeableTipoIncidenciaObject)entity;
            return TipoIncidencia.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(TipoIncidenciaObject entity)
        {

            IMappeableTipoIncidenciaObject TipoIncidencia = (IMappeableTipoIncidenciaObject)entity;
            return TipoIncidencia.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(TipoIncidenciaObject row, object[] parameters)
        {
            ((IMappeableTipoIncidenciaObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        /// <summary>
        /// Get a TipoIncidenciaObject by execute a SQL Query Text
        /// </summary>
        public TipoIncidenciaObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TipoIncidenciaObjectList by execute a SQL Query Text
        /// </summary>
        public TipoIncidenciaObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a TipoIncidenciaObject by calling a Stored Procedure
        /// </summary>
        public TipoIncidenciaObject GetOne(System.Int32 Clave)
        {
            return base.GetOne(new TipoIncidenciaObject(Clave));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a TipoIncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public TipoIncidenciaObjectList GetBySistema(DbTransaction transaction,System.Int32 ClaveSistema)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TipoIncidencia_GetBySistema", ClaveSistema);
        }

        /// <summary>
        /// Get a TipoIncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public TipoIncidenciaObjectList GetBySistema(DbTransaction transaction, IUniqueIdentifiable Sistema)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "TipoIncidencia_GetBySistema", Sistema.Identifier());
        }

    

        

        /// <summary>
        /// Get a TipoIncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public TipoIncidenciaObjectList GetBySistema(System.Int32 ClaveSistema)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TipoIncidencia_GetBySistema", ClaveSistema);
        }

        /// <summary>
        /// Get a TipoIncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public TipoIncidenciaObjectList GetBySistema(IUniqueIdentifiable Sistema)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "TipoIncidencia_GetBySistema", Sistema.Identifier());
        }

    

        /// <summary>
        /// Delete TipoIncidencia
        /// </summary>
        public void Delete(System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TipoIncidencia_Delete", Clave);
        }

        /// <summary>
        /// Delete TipoIncidencia
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TipoIncidencia_Delete", Clave);
        }

            

        

        /// <summary>
        /// Delete TipoIncidencia by Sistema
        /// </summary>
        public void DeleteBySistema(System.Int32 ClaveSistema)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TipoIncidencia_DeleteBySistema", ClaveSistema);
        }

        /// <summary>
        /// Delete TipoIncidencia by Sistema
        /// </summary>
        public void DeleteBySistema(DbTransaction transaction, System.Int32 ClaveSistema)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TipoIncidencia_DeleteBySistema", ClaveSistema);
        }

        /// <summary>
        /// Delete TipoIncidencia by Sistema
        /// </summary>
        public void DeleteBySistema(IUniqueIdentifiable Sistema)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TipoIncidencia_DeleteBySistema", Sistema.Identifier());
        }

        /// <summary>
        /// Delete TipoIncidencia by Sistema
        /// </summary>
        public void DeleteBySistema(DbTransaction transaction, IUniqueIdentifiable Sistema)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TipoIncidencia_DeleteBySistema", Sistema.Identifier());
        }


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








