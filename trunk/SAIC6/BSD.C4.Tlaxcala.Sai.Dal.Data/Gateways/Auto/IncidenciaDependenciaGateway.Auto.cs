
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 17/08/2009 - 04:24 p.m.
// This is a partial class file. The other one is IncidenciaDependenciaGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Gateways
{

    public partial class IncidenciaDependenciaGateway : BaseGateway<IncidenciaDependenciaObject, IncidenciaDependenciaObjectList>, IGenericGateway
    {

        #region "Singleton"

        static IncidenciaDependenciaGateway _instance;

        private IncidenciaDependenciaGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static IncidenciaDependenciaGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new IncidenciaDependenciaGateway();
                else {
                    IncidenciaDependenciaGateway inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.IncidenciaDependenciaGatewaySingleton"] as IncidenciaDependenciaGateway;
                    if (inst == null) {
                        inst = new IncidenciaDependenciaGateway();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.IncidenciaDependenciaGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "IncidenciaDependencia"; }
        }

        protected override string RuleName
        {
            get {return typeof(IncidenciaDependenciaGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, IncidenciaDependenciaObject entity)
        {
            
            IMappeableIncidenciaDependenciaObject IncidenciaDependencia = (IMappeableIncidenciaDependenciaObject)entity;
            IncidenciaDependencia.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(2),
(reader.IsDBNull(3)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(3));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(IncidenciaDependenciaObject entity)
        {

            IMappeableIncidenciaDependenciaObject IncidenciaDependencia = (IMappeableIncidenciaDependenciaObject)entity;
            return IncidenciaDependencia.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(IncidenciaDependenciaObject entity)
        {

            IMappeableIncidenciaDependenciaObject IncidenciaDependencia = (IMappeableIncidenciaDependenciaObject)entity;
            return IncidenciaDependencia.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(IncidenciaDependenciaObject entity)
        {

            IMappeableIncidenciaDependenciaObject IncidenciaDependencia = (IMappeableIncidenciaDependenciaObject)entity;
            return IncidenciaDependencia.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(IncidenciaDependenciaObject row, object[] parameters)
        {
            ((IMappeableIncidenciaDependenciaObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        /// <summary>
        /// Get a IncidenciaDependenciaObject by execute a SQL Query Text
        /// </summary>
        public IncidenciaDependenciaObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a IncidenciaDependenciaObjectList by execute a SQL Query Text
        /// </summary>
        public IncidenciaDependenciaObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a IncidenciaDependenciaObject by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObject GetOne(System.Int32 ClaveDependencia, System.Int32 Folio)
        {
            return base.GetOne(new IncidenciaDependenciaObject(ClaveDependencia, Folio));
        }


        // GetBy Objects and Params
                                    
        /// <summary>
        /// Get a IncidenciaDependenciaObject by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObject GetOne(IUniqueIdentifiable Dependencia, System.Int32 Folio)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(Dependencia, Folio));
        }   
                        


        

        /// <summary>
        /// Get a IncidenciaDependenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObjectList GetByDependencia(DbTransaction transaction,System.Int32 ClaveDependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", ClaveDependencia);
        }

        /// <summary>
        /// Get a IncidenciaDependenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObjectList GetByDependencia(DbTransaction transaction, IUniqueIdentifiable Dependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", Dependencia.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaDependenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObjectList GetByIncidencia(DbTransaction transaction,System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// Get a IncidenciaDependenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObjectList GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Incidencia.Identifier());
        }

    

        

        /// <summary>
        /// Get a IncidenciaDependenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObjectList GetByDependencia(System.Int32 ClaveDependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", ClaveDependencia);
        }

        /// <summary>
        /// Get a IncidenciaDependenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObjectList GetByDependencia(IUniqueIdentifiable Dependencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByDependencia", Dependencia.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaDependenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObjectList GetByIncidencia(System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// Get a IncidenciaDependenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaDependenciaObjectList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_GetByIncidencia", Incidencia.Identifier());
        }

    

        /// <summary>
        /// Delete IncidenciaDependencia
        /// </summary>
        public void Delete(System.Int32 ClaveDependencia, System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_Delete", ClaveDependencia, Folio);
        }

        /// <summary>
        /// Delete IncidenciaDependencia
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 ClaveDependencia, System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_Delete", ClaveDependencia, Folio);
        }

                                    
        /// <summary>
        /// Delete IncidenciaDependencia
        /// </summary>
        public void Delete(IUniqueIdentifiable Dependencia, System.Int32 Folio)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_Delete",  UniqueIdentifierHelper.ComposeIdentifier(Dependencia, Folio));
        }   
        /// <summary>
        /// Delete IncidenciaDependencia
        /// </summary>
        public void Delete(DbTransaction transaction, IUniqueIdentifiable Dependencia, System.Int32 Folio)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_Delete",  UniqueIdentifierHelper.ComposeIdentifier(Dependencia, Folio));
        }   
                        

        

        /// <summary>
        /// Delete IncidenciaDependencia by Dependencia
        /// </summary>
        public void DeleteByDependencia(System.Int32 ClaveDependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByDependencia", ClaveDependencia);
        }

        /// <summary>
        /// Delete IncidenciaDependencia by Dependencia
        /// </summary>
        public void DeleteByDependencia(DbTransaction transaction, System.Int32 ClaveDependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByDependencia", ClaveDependencia);
        }

        /// <summary>
        /// Delete IncidenciaDependencia by Dependencia
        /// </summary>
        public void DeleteByDependencia(IUniqueIdentifiable Dependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByDependencia", Dependencia.Identifier());
        }

        /// <summary>
        /// Delete IncidenciaDependencia by Dependencia
        /// </summary>
        public void DeleteByDependencia(DbTransaction transaction, IUniqueIdentifiable Dependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByDependencia", Dependencia.Identifier());
        }


    

        /// <summary>
        /// Delete IncidenciaDependencia by Incidencia
        /// </summary>
        public void DeleteByIncidencia(System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByIncidencia", Folio);
        }

        /// <summary>
        /// Delete IncidenciaDependencia by Incidencia
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByIncidencia", Folio);
        }

        /// <summary>
        /// Delete IncidenciaDependencia by Incidencia
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByIncidencia", Incidencia.Identifier());
        }

        /// <summary>
        /// Delete IncidenciaDependencia by Incidencia
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "IncidenciaDependencia_DeleteByIncidencia", Incidencia.Identifier());
        }


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








