
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 28/07/2009 - 08:51 p.m.
// This is a partial class file. The other one is CorporacionIncidenciaMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Entities;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class CorporacionIncidenciaMapper : BaseGateway<CorporacionIncidencia, CorporacionIncidenciaList>, IGenericGateway
    {


        #region "Singleton"

        static CorporacionIncidenciaMapper _instance;

        private CorporacionIncidenciaMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static CorporacionIncidenciaMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new CorporacionIncidenciaMapper();
                else {
                    CorporacionIncidenciaMapper inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.CorporacionIncidenciaMapperSingleton"] as CorporacionIncidenciaMapper;
                    if (inst == null) {
                        inst = new CorporacionIncidenciaMapper();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.CorporacionIncidenciaMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Folio","ClaveCorporacion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(CorporacionIncidencia);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "CorporacionIncidencia"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(CorporacionIncidenciaMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, CorporacionIncidencia entity)
        {
            System.Byte[] _HoraDespacho = new System.Byte[8]; if (!reader.IsDBNull(2)) _HoraDespacho = reader.GetValue(2) as System.Byte[];

            IMappeableCorporacionIncidenciaObject CorporacionIncidencia = (IMappeableCorporacionIncidenciaObject)entity;
            CorporacionIncidencia.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
_HoraDespacho);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(CorporacionIncidencia entity)
        {

            IMappeableCorporacionIncidenciaObject CorporacionIncidencia = (IMappeableCorporacionIncidenciaObject)entity;
            return CorporacionIncidencia.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(CorporacionIncidencia entity)
        {

            IMappeableCorporacionIncidenciaObject CorporacionIncidencia = (IMappeableCorporacionIncidenciaObject)entity;
            return CorporacionIncidencia.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(CorporacionIncidencia entity)
        {

            IMappeableCorporacionIncidenciaObject CorporacionIncidencia = (IMappeableCorporacionIncidenciaObject)entity;
            return CorporacionIncidencia.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(CorporacionIncidencia entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableCorporacionIncidenciaObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(CorporacionIncidencia entity)
        {
            
            ((IMappeableCorporacionIncidencia)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a CorporacionIncidencia by execute a SQL Query Text
        /// </summary>
        public CorporacionIncidencia GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a CorporacionIncidenciaList by execute a SQL Query Text
        /// </summary>
        public CorporacionIncidenciaList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public CorporacionIncidencia GetOne(System.Int32 Folio, System.Int32 ClaveCorporacion)
        {
            return base.GetOne(new CorporacionIncidencia(Folio, ClaveCorporacion));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public CorporacionIncidenciaList GetByCorporacion(DbTransaction transaction, System.Int32 ClaveCorporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_GetByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public CorporacionIncidenciaList GetByCorporacion(DbTransaction transaction, IUniqueIdentifiable Corporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_GetByCorporacion", Corporacion.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public CorporacionIncidenciaList GetByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public CorporacionIncidenciaList GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_GetByIncidencia", Incidencia.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public CorporacionIncidenciaList GetByCorporacion(System.Int32 ClaveCorporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_GetByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public CorporacionIncidenciaList GetByCorporacion(IUniqueIdentifiable Corporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_GetByCorporacion", Corporacion.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public CorporacionIncidenciaList GetByIncidencia(System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public CorporacionIncidenciaList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_GetByIncidencia", Incidencia.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Folio, System.Int32 ClaveCorporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_Delete", Folio, ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Folio, System.Int32 ClaveCorporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_Delete", Folio, ClaveCorporacion);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCorporacion(System.Int32 ClaveCorporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_DeleteByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCorporacion(DbTransaction transaction, System.Int32 ClaveCorporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_DeleteByCorporacion", ClaveCorporacion);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCorporacion(IUniqueIdentifiable Corporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_DeleteByCorporacion", Corporacion.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCorporacion(DbTransaction transaction, IUniqueIdentifiable Corporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_DeleteByCorporacion", Corporacion.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_DeleteByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_DeleteByIncidencia", Folio);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_DeleteByIncidencia", Incidencia.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_DeleteByIncidencia", Incidencia.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class CorporacionIncidenciaMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.CorporacionIncidenciaMapper Instance()
        {
            return BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.CorporacionIncidenciaMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a CorporacionIncidenciaEntity by calling a Stored Procedure
        /// </summary>
        public Entities.CorporacionIncidencia GetOne(System.Int32 Folio, System.Int32 ClaveCorporacion) {
            return Instance().GetOne( Folio, ClaveCorporacion);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a CorporacionIncidenciaList by calling a Stored Procedure
        /// </summary>
        public Entities.CorporacionIncidenciaList GetByCorporacion(System.Int32 ClaveCorporacion)
        {
            return Instance().GetByCorporacion(ClaveCorporacion);
        }

        /// <summary>
        /// Get a CorporacionIncidenciaList by calling a Stored Procedure
        /// </summary>
        public Entities.CorporacionIncidenciaList GetByCorporacion(IUniqueIdentifiable Corporacion)
        {
            return Instance().GetByCorporacion(Corporacion);
        }

    

        /// <summary>
        /// Get a CorporacionIncidenciaList by calling a Stored Procedure
        /// </summary>
        public Entities.CorporacionIncidenciaList GetByIncidencia(System.Int32 Folio)
        {
            return Instance().GetByIncidencia(Folio);
        }

        /// <summary>
        /// Get a CorporacionIncidenciaList by calling a Stored Procedure
        /// </summary>
        public Entities.CorporacionIncidenciaList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return Instance().GetByIncidencia(Incidencia);
        }

    

       

        /// <summary>
        /// Delete children for CorporacionIncidencia
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, CorporacionIncidencia entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete CorporacionIncidencia by Corporacion
        /// </summary>
        public void DeleteByCorporacion(System.Int32 ClaveCorporacion)
        {
            Instance().DeleteByCorporacion(ClaveCorporacion);
        }

        /// <summary>
        /// Delete CorporacionIncidencia by Corporacion
        /// </summary>
        public void DeleteByCorporacion(IUniqueIdentifiable Corporacion)
        {
            Instance().DeleteByCorporacion(Corporacion);
        }

    

        /// <summary>
        /// Delete CorporacionIncidencia by Incidencia
        /// </summary>
        public void DeleteByIncidencia(System.Int32 Folio)
        {
            Instance().DeleteByIncidencia(Folio);
        }

        /// <summary>
        /// Delete CorporacionIncidencia by Incidencia
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            Instance().DeleteByIncidencia(Incidencia);
        }

    
        /// <summary>
        /// Delete CorporacionIncidencia 
        /// </summary>
        public void Delete(System.Int32 Folio, System.Int32 ClaveCorporacion){
            Instance().Delete(Folio, ClaveCorporacion);
        }

        /// <summary>
        /// Delete CorporacionIncidencia 
        /// </summary>
        public void Delete(Entities.CorporacionIncidencia entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save CorporacionIncidencia  
        /// </summary>
        public void Save(Entities.CorporacionIncidencia entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert CorporacionIncidencia 
        /// </summary>
        public void Insert(Entities.CorporacionIncidencia entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll CorporacionIncidencia 
        /// </summary>
        public Entities.CorporacionIncidenciaList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save CorporacionIncidencia 
        /// </summary>
        public void Save(System.Int32 Folio, System.Int32 ClaveCorporacion){
            Entities.CorporacionIncidencia entity = Instance().GetOne(Folio, ClaveCorporacion);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}, {2} = {3}", "Folio", Folio, "ClaveCorporacion", ClaveCorporacion));

            Instance().Save(entity);
        }

        /// <summary>
        /// Insert CorporacionIncidencia
        /// </summary>
        public void Insert(System.Int32 Folio, System.Int32 ClaveCorporacion){
            Entities.CorporacionIncidencia entity = new Entities.CorporacionIncidencia();

            entity.Folio = Folio;
            entity.ClaveCorporacion = ClaveCorporacion;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class CorporacionIncidenciaLoader<T> : BaseLoader< T, CorporacionIncidencia, ObjectList<T>>, IGenericGateway where T : CorporacionIncidencia, new()
    {

        #region "Singleton"

        static CorporacionIncidenciaLoader<T> _instance;

        private CorporacionIncidenciaLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static CorporacionIncidenciaLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new CorporacionIncidenciaLoader<T>();
                else {
                    CorporacionIncidenciaLoader<T> inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.CorporacionIncidenciaLoaderSingleton"] as CorporacionIncidenciaLoader<T>;
                    if (inst == null) {
                        inst = new CorporacionIncidenciaLoader<T>();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.CorporacionIncidenciaLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Folio","ClaveCorporacion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(CorporacionIncidencia);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "CorporacionIncidencia"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, CorporacionIncidencia entity)
        {
            System.Byte[] _HoraDespacho = new System.Byte[8]; if (!reader.IsDBNull(2)) reader.GetBytes(2, 0, _HoraDespacho, 0, 8);

            IMappeableCorporacionIncidenciaObject CorporacionIncidencia = (IMappeableCorporacionIncidenciaObject)entity;
            CorporacionIncidencia.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
_HoraDespacho);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableCorporacionIncidencia)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a CorporacionIncidencia by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a CorporacionIncidenciaList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Folio, System.Int32 ClaveCorporacion)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_GetOne", Folio, ClaveCorporacion);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCorporacion(DbTransaction transaction, System.Int32 ClaveCorporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_GetByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCorporacion(DbTransaction transaction, IUniqueIdentifiable Corporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_GetByCorporacion", Corporacion.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "CorporacionIncidencia_GetByIncidencia", Incidencia.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCorporacion(System.Int32 ClaveCorporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_GetByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCorporacion(IUniqueIdentifiable Corporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_GetByCorporacion", Corporacion.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "CorporacionIncidencia_GetByIncidencia", Incidencia.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





