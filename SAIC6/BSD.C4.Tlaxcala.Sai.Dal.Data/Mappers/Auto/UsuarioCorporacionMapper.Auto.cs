
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 04/08/2009 - 06:03 p.m.
// This is a partial class file. The other one is UsuarioCorporacionMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;

using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class UsuarioCorporacionMapper : BaseGateway<UsuarioCorporacionObject, UsuarioCorporacionObjectList>, IGenericGateway
    {


        #region "Singleton"

        static UsuarioCorporacionMapper _instance;

        private UsuarioCorporacionMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static UsuarioCorporacionMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new UsuarioCorporacionMapper();
                else {
                    UsuarioCorporacionMapper inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.UsuarioCorporacionMapperSingleton"] as UsuarioCorporacionMapper;
                    if (inst == null) {
                        inst = new UsuarioCorporacionMapper();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.UsuarioCorporacionMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"ClaveUsuario","ClaveCorporacion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(UsuarioCorporacionObject);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "UsuarioCorporacion"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(UsuarioCorporacionMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, UsuarioCorporacionObject entity)
        {
            
            IMappeableUsuarioCorporacionObject UsuarioCorporacion = (IMappeableUsuarioCorporacionObject)entity;
            UsuarioCorporacion.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(UsuarioCorporacionObject entity)
        {

            IMappeableUsuarioCorporacionObject UsuarioCorporacion = (IMappeableUsuarioCorporacionObject)entity;
            return UsuarioCorporacion.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(UsuarioCorporacionObject entity)
        {

            IMappeableUsuarioCorporacionObject UsuarioCorporacion = (IMappeableUsuarioCorporacionObject)entity;
            return UsuarioCorporacion.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(UsuarioCorporacionObject entity)
        {

            IMappeableUsuarioCorporacionObject UsuarioCorporacion = (IMappeableUsuarioCorporacionObject)entity;
            return UsuarioCorporacion.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(UsuarioCorporacionObject entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableUsuarioCorporacionObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


          





        /// <summary>
        /// Get a UsuarioCorporacionObject by execute a SQL Query Text
        /// </summary>
        public UsuarioCorporacionObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a UsuarioCorporacionObjectList by execute a SQL Query Text
        /// </summary>
        public UsuarioCorporacionObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public UsuarioCorporacionObject GetOne(System.Int32 ClaveUsuario, System.Int32 ClaveCorporacion)
        {
            return base.GetOne(new UsuarioCorporacionObject(ClaveUsuario, ClaveCorporacion));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public UsuarioCorporacionObjectList GetByCorporacion(DbTransaction transaction, System.Int32 ClaveCorporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_GetByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public UsuarioCorporacionObjectList GetByCorporacion(DbTransaction transaction, IUniqueIdentifiable Corporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_GetByCorporacion", Corporacion.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public UsuarioCorporacionObjectList GetByUsuario(DbTransaction transaction, System.Int32 ClaveUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_GetByUsuario", ClaveUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public UsuarioCorporacionObjectList GetByUsuario(DbTransaction transaction, IUniqueIdentifiable Usuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_GetByUsuario", Usuario.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public UsuarioCorporacionObjectList GetByCorporacion(System.Int32 ClaveCorporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_GetByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public UsuarioCorporacionObjectList GetByCorporacion(IUniqueIdentifiable Corporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_GetByCorporacion", Corporacion.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public UsuarioCorporacionObjectList GetByUsuario(System.Int32 ClaveUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_GetByUsuario", ClaveUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public UsuarioCorporacionObjectList GetByUsuario(IUniqueIdentifiable Usuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_GetByUsuario", Usuario.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 ClaveUsuario, System.Int32 ClaveCorporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_Delete", ClaveUsuario, ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 ClaveUsuario, System.Int32 ClaveCorporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_Delete", ClaveUsuario, ClaveCorporacion);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCorporacion(System.Int32 ClaveCorporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_DeleteByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCorporacion(DbTransaction transaction, System.Int32 ClaveCorporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_DeleteByCorporacion", ClaveCorporacion);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCorporacion(IUniqueIdentifiable Corporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_DeleteByCorporacion", Corporacion.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByCorporacion(DbTransaction transaction, IUniqueIdentifiable Corporacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_DeleteByCorporacion", Corporacion.Identifier());
        }


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUsuario(System.Int32 ClaveUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_DeleteByUsuario", ClaveUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUsuario(DbTransaction transaction, System.Int32 ClaveUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_DeleteByUsuario", ClaveUsuario);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUsuario(IUniqueIdentifiable Usuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_DeleteByUsuario", Usuario.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUsuario(DbTransaction transaction, IUniqueIdentifiable Usuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_DeleteByUsuario", Usuario.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class UsuarioCorporacionMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.UsuarioCorporacionMapper Instance()
        {
            return BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.UsuarioCorporacionMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a UsuarioCorporacionEntity by calling a Stored Procedure
        /// </summary>
        public Objects.UsuarioCorporacionObject GetOne(System.Int32 ClaveUsuario, System.Int32 ClaveCorporacion) {
            return Instance().GetOne( ClaveUsuario, ClaveCorporacion);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a UsuarioCorporacionObjectList by calling a Stored Procedure
        /// </summary>
        public Objects.UsuarioCorporacionObjectList GetByCorporacion(System.Int32 ClaveCorporacion)
        {
            return Instance().GetByCorporacion(ClaveCorporacion);
        }

        /// <summary>
        /// Get a UsuarioCorporacionObjectList by calling a Stored Procedure
        /// </summary>
        public Objects.UsuarioCorporacionObjectList GetByCorporacion(IUniqueIdentifiable Corporacion)
        {
            return Instance().GetByCorporacion(Corporacion);
        }

    

        /// <summary>
        /// Get a UsuarioCorporacionObjectList by calling a Stored Procedure
        /// </summary>
        public Objects.UsuarioCorporacionObjectList GetByUsuario(System.Int32 ClaveUsuario)
        {
            return Instance().GetByUsuario(ClaveUsuario);
        }

        /// <summary>
        /// Get a UsuarioCorporacionObjectList by calling a Stored Procedure
        /// </summary>
        public Objects.UsuarioCorporacionObjectList GetByUsuario(IUniqueIdentifiable Usuario)
        {
            return Instance().GetByUsuario(Usuario);
        }

    

       

            

        

        /// <summary>
        /// Delete UsuarioCorporacion by Corporacion
        /// </summary>
        public void DeleteByCorporacion(System.Int32 ClaveCorporacion)
        {
            Instance().DeleteByCorporacion(ClaveCorporacion);
        }

        /// <summary>
        /// Delete UsuarioCorporacionObject by Corporacion
        /// </summary>
        public void DeleteByCorporacion(IUniqueIdentifiable Corporacion)
        {
            Instance().DeleteByCorporacion(Corporacion);
        }

    

        /// <summary>
        /// Delete UsuarioCorporacion by Usuario
        /// </summary>
        public void DeleteByUsuario(System.Int32 ClaveUsuario)
        {
            Instance().DeleteByUsuario(ClaveUsuario);
        }

        /// <summary>
        /// Delete UsuarioCorporacionObject by Usuario
        /// </summary>
        public void DeleteByUsuario(IUniqueIdentifiable Usuario)
        {
            Instance().DeleteByUsuario(Usuario);
        }

    
        /// <summary>
        /// Delete UsuarioCorporacion 
        /// </summary>
        public void Delete(System.Int32 ClaveUsuario, System.Int32 ClaveCorporacion){
            Instance().Delete(ClaveUsuario, ClaveCorporacion);
        }

        /// <summary>
        /// Delete UsuarioCorporacionObject 
        /// </summary>
        public void Delete(Objects.UsuarioCorporacionObject entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save UsuarioCorporacionObject  
        /// </summary>
        public void Save(Objects.UsuarioCorporacionObject entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert UsuarioCorporacionObject 
        /// </summary>
        public void Insert(Objects.UsuarioCorporacionObject entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll UsuarioCorporacionObject 
        /// </summary>
        public Objects.UsuarioCorporacionObjectList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save UsuarioCorporacion 
        /// </summary>
        public void Save(System.Int32 ClaveUsuario, System.Int32 ClaveCorporacion){
            Objects.UsuarioCorporacionObject entity = Instance().GetOne(ClaveUsuario, ClaveCorporacion);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}, {2} = {3}", "ClaveUsuario", ClaveUsuario, "ClaveCorporacion", ClaveCorporacion));

            Instance().Save(entity);
        }

        /// <summary>
        /// Insert UsuarioCorporacionObject
        /// </summary>
        public void Insert(System.Int32 ClaveUsuario, System.Int32 ClaveCorporacion){
            Objects.UsuarioCorporacionObject entity = new Objects.UsuarioCorporacionObject();

            entity.ClaveUsuario = ClaveUsuario;
            entity.ClaveCorporacion = ClaveCorporacion;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class UsuarioCorporacionLoader<T> : BaseLoader< T, UsuarioCorporacionObject, ObjectList<T>>, IGenericGateway where T : UsuarioCorporacionObject, new()
    {

        #region "Singleton"

        static UsuarioCorporacionLoader<T> _instance;

        private UsuarioCorporacionLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static UsuarioCorporacionLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new UsuarioCorporacionLoader<T>();
                else {
                    UsuarioCorporacionLoader<T> inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.UsuarioCorporacionLoaderSingleton"] as UsuarioCorporacionLoader<T>;
                    if (inst == null) {
                        inst = new UsuarioCorporacionLoader<T>();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.UsuarioCorporacionLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"ClaveUsuario","ClaveCorporacion"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(UsuarioCorporacionObject);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "UsuarioCorporacion"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, UsuarioCorporacionObject entity)
        {
            
            IMappeableUsuarioCorporacionObject UsuarioCorporacion = (IMappeableUsuarioCorporacionObject)entity;
            UsuarioCorporacion.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        



        /// <summary>
        /// Get a UsuarioCorporacion by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a UsuarioCorporacionList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 ClaveUsuario, System.Int32 ClaveCorporacion)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_GetOne", ClaveUsuario, ClaveCorporacion);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCorporacion(DbTransaction transaction, System.Int32 ClaveCorporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_GetByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCorporacion(DbTransaction transaction, IUniqueIdentifiable Corporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_GetByCorporacion", Corporacion.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUsuario(DbTransaction transaction, System.Int32 ClaveUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_GetByUsuario", ClaveUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUsuario(DbTransaction transaction, IUniqueIdentifiable Usuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuarioCorporacion_GetByUsuario", Usuario.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCorporacion(System.Int32 ClaveCorporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_GetByCorporacion", ClaveCorporacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByCorporacion(IUniqueIdentifiable Corporacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_GetByCorporacion", Corporacion.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUsuario(System.Int32 ClaveUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_GetByUsuario", ClaveUsuario);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUsuario(IUniqueIdentifiable Usuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "UsuarioCorporacion_GetByUsuario", Usuario.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





