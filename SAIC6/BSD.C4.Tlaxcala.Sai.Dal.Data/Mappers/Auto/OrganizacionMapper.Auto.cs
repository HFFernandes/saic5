
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 17/08/2009 - 04:24 p.m.
// This is a partial class file. The other one is OrganizacionMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Entities;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class OrganizacionMapper : BaseGateway<Organizacion, OrganizacionList>, IGenericGateway
    {


        #region "Singleton"

        static OrganizacionMapper _instance;

        private OrganizacionMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static OrganizacionMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new OrganizacionMapper();
                else {
                    OrganizacionMapper inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.OrganizacionMapperSingleton"] as OrganizacionMapper;
                    if (inst == null) {
                        inst = new OrganizacionMapper();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.OrganizacionMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Clave"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Organizacion);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Organizacion"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(OrganizacionMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Organizacion entity)
        {
            
            IMappeableOrganizacionObject Organizacion = (IMappeableOrganizacionObject)entity;
            Organizacion.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6),
reader.GetInt32(7));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(Organizacion entity)
        {

            IMappeableOrganizacionObject Organizacion = (IMappeableOrganizacionObject)entity;
            return Organizacion.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(Organizacion entity)
        {

            IMappeableOrganizacionObject Organizacion = (IMappeableOrganizacionObject)entity;
            return Organizacion.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(Organizacion entity)
        {

            IMappeableOrganizacionObject Organizacion = (IMappeableOrganizacionObject)entity;
            return Organizacion.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Organizacion entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableOrganizacionObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Organizacion entity)
        {
            
            ((IMappeableOrganizacion)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a Organizacion by execute a SQL Query Text
        /// </summary>
        public Organizacion GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a OrganizacionList by execute a SQL Query Text
        /// </summary>
        public OrganizacionList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public Organizacion GetOne(System.Int32 Clave)
        {
            return base.GetOne(new Organizacion(Clave));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public OrganizacionList GetByClasificacionOrganizacion(DbTransaction transaction, System.Int32 ClaveClasificacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Organizacion_GetByClasificacionOrganizacion", ClaveClasificacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public OrganizacionList GetByClasificacionOrganizacion(DbTransaction transaction, IUniqueIdentifiable ClasificacionOrganizacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Organizacion_GetByClasificacionOrganizacion", ClasificacionOrganizacion.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public OrganizacionList GetByClasificacionOrganizacion(System.Int32 ClaveClasificacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Organizacion_GetByClasificacionOrganizacion", ClaveClasificacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public OrganizacionList GetByClasificacionOrganizacion(IUniqueIdentifiable ClasificacionOrganizacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Organizacion_GetByClasificacionOrganizacion", ClasificacionOrganizacion.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Organizacion_Delete", Clave);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Organizacion_Delete", Clave);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByClasificacionOrganizacion(System.Int32 ClaveClasificacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Organizacion_DeleteByClasificacionOrganizacion", ClaveClasificacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByClasificacionOrganizacion(DbTransaction transaction, System.Int32 ClaveClasificacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Organizacion_DeleteByClasificacionOrganizacion", ClaveClasificacion);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByClasificacionOrganizacion(IUniqueIdentifiable ClasificacionOrganizacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Organizacion_DeleteByClasificacionOrganizacion", ClasificacionOrganizacion.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByClasificacionOrganizacion(DbTransaction transaction, IUniqueIdentifiable ClasificacionOrganizacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Organizacion_DeleteByClasificacionOrganizacion", ClasificacionOrganizacion.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class OrganizacionMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.OrganizacionMapper Instance()
        {
            return BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.OrganizacionMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a OrganizacionEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Organizacion GetOne(System.Int32 Clave) {
            return Instance().GetOne( Clave);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a OrganizacionList by calling a Stored Procedure
        /// </summary>
        public Entities.OrganizacionList GetByClasificacionOrganizacion(System.Int32 ClaveClasificacion)
        {
            return Instance().GetByClasificacionOrganizacion(ClaveClasificacion);
        }

        /// <summary>
        /// Get a OrganizacionList by calling a Stored Procedure
        /// </summary>
        public Entities.OrganizacionList GetByClasificacionOrganizacion(IUniqueIdentifiable ClasificacionOrganizacion)
        {
            return Instance().GetByClasificacionOrganizacion(ClasificacionOrganizacion);
        }

    

       

        /// <summary>
        /// Delete children for Organizacion
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Organizacion entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete Organizacion by ClasificacionOrganizacion
        /// </summary>
        public void DeleteByClasificacionOrganizacion(System.Int32 ClaveClasificacion)
        {
            Instance().DeleteByClasificacionOrganizacion(ClaveClasificacion);
        }

        /// <summary>
        /// Delete Organizacion by ClasificacionOrganizacion
        /// </summary>
        public void DeleteByClasificacionOrganizacion(IUniqueIdentifiable ClasificacionOrganizacion)
        {
            Instance().DeleteByClasificacionOrganizacion(ClasificacionOrganizacion);
        }

    
        /// <summary>
        /// Delete Organizacion 
        /// </summary>
        public void Delete(System.Int32 Clave){
            Instance().Delete(Clave);
        }

        /// <summary>
        /// Delete Organizacion 
        /// </summary>
        public void Delete(Entities.Organizacion entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Organizacion  
        /// </summary>
        public void Save(Entities.Organizacion entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Organizacion 
        /// </summary>
        public void Insert(Entities.Organizacion entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll Organizacion 
        /// </summary>
        public Entities.OrganizacionList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save Organizacion 
        /// </summary>
        public void Save(System.Int32 Clave, System.String Nombre, System.String Dirección, System.String Telefono, System.String Fax, System.String Email, System.String DireccionWeb, System.Int32 ClaveClasificacion){
            Entities.Organizacion entity = Instance().GetOne(Clave);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Clave", Clave));

            entity.Nombre = Nombre;
            entity.Dirección = Dirección;
            entity.Telefono = Telefono;
            entity.Fax = Fax;
            entity.Email = Email;
            entity.DireccionWeb = DireccionWeb;
            entity.ClaveClasificacion = ClaveClasificacion;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Organizacion
        /// </summary>
        public void Insert(System.String Nombre, System.String Dirección, System.String Telefono, System.String Fax, System.String Email, System.String DireccionWeb, System.Int32 ClaveClasificacion){
            Entities.Organizacion entity = new Entities.Organizacion();

            entity.Nombre = Nombre;
            entity.Dirección = Dirección;
            entity.Telefono = Telefono;
            entity.Fax = Fax;
            entity.Email = Email;
            entity.DireccionWeb = DireccionWeb;
            entity.ClaveClasificacion = ClaveClasificacion;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class OrganizacionLoader<T> : BaseLoader< T, Organizacion, ObjectList<T>>, IGenericGateway where T : Organizacion, new()
    {

        #region "Singleton"

        static OrganizacionLoader<T> _instance;

        private OrganizacionLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static OrganizacionLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new OrganizacionLoader<T>();
                else {
                    OrganizacionLoader<T> inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.OrganizacionLoaderSingleton"] as OrganizacionLoader<T>;
                    if (inst == null) {
                        inst = new OrganizacionLoader<T>();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.OrganizacionLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Clave"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Organizacion);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Organizacion"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Organizacion entity)
        {
            
            IMappeableOrganizacionObject Organizacion = (IMappeableOrganizacionObject)entity;
            Organizacion.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? "" : reader.GetString(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6),
reader.GetInt32(7));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableOrganizacion)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a Organizacion by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a OrganizacionList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Clave)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Organizacion_GetOne", Clave);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByClasificacionOrganizacion(DbTransaction transaction, System.Int32 ClaveClasificacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Organizacion_GetByClasificacionOrganizacion", ClaveClasificacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByClasificacionOrganizacion(DbTransaction transaction, IUniqueIdentifiable ClasificacionOrganizacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Organizacion_GetByClasificacionOrganizacion", ClasificacionOrganizacion.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByClasificacionOrganizacion(System.Int32 ClaveClasificacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Organizacion_GetByClasificacionOrganizacion", ClaveClasificacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByClasificacionOrganizacion(IUniqueIdentifiable ClasificacionOrganizacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Organizacion_GetByClasificacionOrganizacion", ClasificacionOrganizacion.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





