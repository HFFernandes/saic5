
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 04/08/2009 - 01:50 p.m.
// This is a partial class file. The other one is RoboVehiculoAccesoriosMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Entities;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class RoboVehiculoAccesoriosMapper : BaseGateway<RoboVehiculoAccesorios, RoboVehiculoAccesoriosList>, IGenericGateway
    {


        #region "Singleton"

        static RoboVehiculoAccesoriosMapper _instance;

        private RoboVehiculoAccesoriosMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static RoboVehiculoAccesoriosMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new RoboVehiculoAccesoriosMapper();
                else {
                    RoboVehiculoAccesoriosMapper inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboVehiculoAccesoriosMapperSingleton"] as RoboVehiculoAccesoriosMapper;
                    if (inst == null) {
                        inst = new RoboVehiculoAccesoriosMapper();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboVehiculoAccesoriosMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Clave"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(RoboVehiculoAccesorios);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "RoboVehiculoAccesorios"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(RoboVehiculoAccesoriosMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, RoboVehiculoAccesorios entity)
        {
            
            IMappeableRoboVehiculoAccesoriosObject RoboVehiculoAccesorios = (IMappeableRoboVehiculoAccesoriosObject)entity;
            RoboVehiculoAccesorios.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(RoboVehiculoAccesorios entity)
        {

            IMappeableRoboVehiculoAccesoriosObject RoboVehiculoAccesorios = (IMappeableRoboVehiculoAccesoriosObject)entity;
            return RoboVehiculoAccesorios.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(RoboVehiculoAccesorios entity)
        {

            IMappeableRoboVehiculoAccesoriosObject RoboVehiculoAccesorios = (IMappeableRoboVehiculoAccesoriosObject)entity;
            return RoboVehiculoAccesorios.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(RoboVehiculoAccesorios entity)
        {

            IMappeableRoboVehiculoAccesoriosObject RoboVehiculoAccesorios = (IMappeableRoboVehiculoAccesoriosObject)entity;
            return RoboVehiculoAccesorios.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(RoboVehiculoAccesorios entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableRoboVehiculoAccesoriosObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(RoboVehiculoAccesorios entity)
        {
            
            ((IMappeableRoboVehiculoAccesorios)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a RoboVehiculoAccesorios by execute a SQL Query Text
        /// </summary>
        public RoboVehiculoAccesorios GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a RoboVehiculoAccesoriosList by execute a SQL Query Text
        /// </summary>
        public RoboVehiculoAccesoriosList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public RoboVehiculoAccesorios GetOne(System.Int32 Clave)
        {
            return base.GetOne(new RoboVehiculoAccesorios(Clave));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public RoboVehiculoAccesoriosList GetByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboVehiculoAccesorios_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public RoboVehiculoAccesoriosList GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboVehiculoAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public RoboVehiculoAccesoriosList GetByIncidencia(System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboVehiculoAccesorios_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public RoboVehiculoAccesoriosList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboVehiculoAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RoboVehiculoAccesorios_Delete", Clave);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Clave)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RoboVehiculoAccesorios_Delete", Clave);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RoboVehiculoAccesorios_DeleteByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RoboVehiculoAccesorios_DeleteByIncidencia", Folio);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RoboVehiculoAccesorios_DeleteByIncidencia", Incidencia.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RoboVehiculoAccesorios_DeleteByIncidencia", Incidencia.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class RoboVehiculoAccesoriosMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.RoboVehiculoAccesoriosMapper Instance()
        {
            return BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.RoboVehiculoAccesoriosMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a RoboVehiculoAccesoriosEntity by calling a Stored Procedure
        /// </summary>
        public Entities.RoboVehiculoAccesorios GetOne(System.Int32 Clave) {
            return Instance().GetOne( Clave);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a RoboVehiculoAccesoriosList by calling a Stored Procedure
        /// </summary>
        public Entities.RoboVehiculoAccesoriosList GetByIncidencia(System.Int32 Folio)
        {
            return Instance().GetByIncidencia(Folio);
        }

        /// <summary>
        /// Get a RoboVehiculoAccesoriosList by calling a Stored Procedure
        /// </summary>
        public Entities.RoboVehiculoAccesoriosList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return Instance().GetByIncidencia(Incidencia);
        }

    

       

        /// <summary>
        /// Delete children for RoboVehiculoAccesorios
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, RoboVehiculoAccesorios entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete RoboVehiculoAccesorios by Incidencia
        /// </summary>
        public void DeleteByIncidencia(System.Int32 Folio)
        {
            Instance().DeleteByIncidencia(Folio);
        }

        /// <summary>
        /// Delete RoboVehiculoAccesorios by Incidencia
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            Instance().DeleteByIncidencia(Incidencia);
        }

    
        /// <summary>
        /// Delete RoboVehiculoAccesorios 
        /// </summary>
        public void Delete(System.Int32 Clave){
            Instance().Delete(Clave);
        }

        /// <summary>
        /// Delete RoboVehiculoAccesorios 
        /// </summary>
        public void Delete(Entities.RoboVehiculoAccesorios entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save RoboVehiculoAccesorios  
        /// </summary>
        public void Save(Entities.RoboVehiculoAccesorios entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert RoboVehiculoAccesorios 
        /// </summary>
        public void Insert(Entities.RoboVehiculoAccesorios entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll RoboVehiculoAccesorios 
        /// </summary>
        public Entities.RoboVehiculoAccesoriosList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save RoboVehiculoAccesorios 
        /// </summary>
        public void Save(System.Int32 Clave, System.Int32 Folio, System.String ClaveVehiculo, System.String AccesoriosRobados, System.String SePercato, System.DateTime FechaPercato, System.String DescripcionResponsables){
            Entities.RoboVehiculoAccesorios entity = Instance().GetOne(Clave);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "Clave", Clave));

            entity.Folio = Folio;
            entity.ClaveVehiculo = ClaveVehiculo;
            entity.AccesoriosRobados = AccesoriosRobados;
            entity.SePercato = SePercato;
            entity.FechaPercato = FechaPercato;
            entity.DescripcionResponsables = DescripcionResponsables;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert RoboVehiculoAccesorios
        /// </summary>
        public void Insert(System.Int32 Folio, System.String ClaveVehiculo, System.String AccesoriosRobados, System.String SePercato, System.DateTime FechaPercato, System.String DescripcionResponsables){
            Entities.RoboVehiculoAccesorios entity = new Entities.RoboVehiculoAccesorios();

            entity.Folio = Folio;
            entity.ClaveVehiculo = ClaveVehiculo;
            entity.AccesoriosRobados = AccesoriosRobados;
            entity.SePercato = SePercato;
            entity.FechaPercato = FechaPercato;
            entity.DescripcionResponsables = DescripcionResponsables;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class RoboVehiculoAccesoriosLoader<T> : BaseLoader< T, RoboVehiculoAccesorios, ObjectList<T>>, IGenericGateway where T : RoboVehiculoAccesorios, new()
    {

        #region "Singleton"

        static RoboVehiculoAccesoriosLoader<T> _instance;

        private RoboVehiculoAccesoriosLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static RoboVehiculoAccesoriosLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new RoboVehiculoAccesoriosLoader<T>();
                else {
                    RoboVehiculoAccesoriosLoader<T> inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboVehiculoAccesoriosLoaderSingleton"] as RoboVehiculoAccesoriosLoader<T>;
                    if (inst == null) {
                        inst = new RoboVehiculoAccesoriosLoader<T>();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboVehiculoAccesoriosLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"Clave"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(RoboVehiculoAccesorios);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "RoboVehiculoAccesorios"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, RoboVehiculoAccesorios entity)
        {
            
            IMappeableRoboVehiculoAccesoriosObject RoboVehiculoAccesorios = (IMappeableRoboVehiculoAccesoriosObject)entity;
            RoboVehiculoAccesorios.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
(reader.IsDBNull(2)) ? "" : reader.GetString(2),
reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
(reader.IsDBNull(5)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(5),
(reader.IsDBNull(6)) ? "" : reader.GetString(6));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "up_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableRoboVehiculoAccesorios)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a RoboVehiculoAccesorios by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a RoboVehiculoAccesoriosList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 Clave)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "RoboVehiculoAccesorios_GetOne", Clave);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(DbTransaction transaction, System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboVehiculoAccesorios_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboVehiculoAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(System.Int32 Folio)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboVehiculoAccesorios_GetByIncidencia", Folio);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboVehiculoAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





