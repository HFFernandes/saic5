
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 8/30/2009 - 1:47 PM
// This is a partial class file. The other one is RoboAccesoriosMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Entities;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class RoboAccesoriosMapper : BaseGateway<RoboAccesorios, RoboAccesoriosList>, IGenericGateway
    {


        #region "Singleton"

        static RoboAccesoriosMapper _instance;

        private RoboAccesoriosMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static RoboAccesoriosMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new RoboAccesoriosMapper();
                else {
                    RoboAccesoriosMapper inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboAccesoriosMapperSingleton"] as RoboAccesoriosMapper;
                    if (inst == null) {
                        inst = new RoboAccesoriosMapper();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboAccesoriosMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdRoboAccesorio"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(RoboAccesorios);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "RoboAccesorios"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(RoboAccesoriosMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, RoboAccesorios entity)
        {
            
            IMappeableRoboAccesoriosObject RoboAccesorios = (IMappeableRoboAccesoriosObject)entity;
            RoboAccesorios.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1),
(reader.IsDBNull(2)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
reader.GetInt32(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(RoboAccesorios entity)
        {

            IMappeableRoboAccesoriosObject RoboAccesorios = (IMappeableRoboAccesoriosObject)entity;
            return RoboAccesorios.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(RoboAccesorios entity)
        {

            IMappeableRoboAccesoriosObject RoboAccesorios = (IMappeableRoboAccesoriosObject)entity;
            return RoboAccesorios.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(RoboAccesorios entity)
        {

            IMappeableRoboAccesoriosObject RoboAccesorios = (IMappeableRoboAccesoriosObject)entity;
            return RoboAccesorios.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(RoboAccesorios entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableRoboAccesoriosObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "rb_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(RoboAccesorios entity)
        {
            Objects.IncidenciaObject IncidenciaEntity = null; // Lazy load
            ((IMappeableRoboAccesorios)entity).CompleteEntity(IncidenciaEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a RoboAccesorios by execute a SQL Query Text
        /// </summary>
        public RoboAccesorios GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a RoboAccesoriosList by execute a SQL Query Text
        /// </summary>
        public RoboAccesoriosList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public RoboAccesorios GetOne(System.Int32 IdRoboAccesorio)
        {
            return base.GetOne(new RoboAccesorios(IdRoboAccesorio));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public RoboAccesoriosList GetByIncidencia(DbTransaction transaction, System.Int32 IdIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", IdIncidencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public RoboAccesoriosList GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public RoboAccesoriosList GetByIncidencia(System.Int32 IdIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", IdIncidencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public RoboAccesoriosList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdRoboAccesorio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_Delete", IdRoboAccesorio);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdRoboAccesorio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_Delete", IdRoboAccesorio);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(System.Int32 IdIncidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_DeleteByIncidencia", IdIncidencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, System.Int32 IdIncidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_DeleteByIncidencia", IdIncidencia);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_DeleteByIncidencia", Incidencia.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_DeleteByIncidencia", Incidencia.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class RoboAccesoriosMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.RoboAccesoriosMapper Instance()
        {
            return BSD.C4.Tlaxcala.Sai.Dal.Rules.Mappers.RoboAccesoriosMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a RoboAccesoriosEntity by calling a Stored Procedure
        /// </summary>
        public Entities.RoboAccesorios GetOne(System.Int32 IdRoboAccesorio) {
            return Instance().GetOne( IdRoboAccesorio);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a RoboAccesoriosList by calling a Stored Procedure
        /// </summary>
        public Entities.RoboAccesoriosList GetByIncidencia(System.Int32 IdIncidencia)
        {
            return Instance().GetByIncidencia(IdIncidencia);
        }

        /// <summary>
        /// Get a RoboAccesoriosList by calling a Stored Procedure
        /// </summary>
        public Entities.RoboAccesoriosList GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return Instance().GetByIncidencia(Incidencia);
        }

    

       

        /// <summary>
        /// Delete children for RoboAccesorios
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, RoboAccesorios entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete RoboAccesorios by Incidencia
        /// </summary>
        public void DeleteByIncidencia(System.Int32 IdIncidencia)
        {
            Instance().DeleteByIncidencia(IdIncidencia);
        }

        /// <summary>
        /// Delete RoboAccesorios by Incidencia
        /// </summary>
        public void DeleteByIncidencia(IUniqueIdentifiable Incidencia)
        {
            Instance().DeleteByIncidencia(Incidencia);
        }

    
        /// <summary>
        /// Delete RoboAccesorios 
        /// </summary>
        public void Delete(System.Int32 IdRoboAccesorio){
            Instance().Delete(IdRoboAccesorio);
        }

        /// <summary>
        /// Delete RoboAccesorios 
        /// </summary>
        public void Delete(Entities.RoboAccesorios entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save RoboAccesorios  
        /// </summary>
        public void Save(Entities.RoboAccesorios entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert RoboAccesorios 
        /// </summary>
        public void Insert(Entities.RoboAccesorios entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll RoboAccesorios 
        /// </summary>
        public Entities.RoboAccesoriosList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save RoboAccesorios 
        /// </summary>
        public void Save(System.Int32 IdRoboAccesorio, System.String PersonaPercato, System.DateTime FechaPercato, System.String DescripcionResponsable, System.Int32 IdIncidencia){
            Entities.RoboAccesorios entity = Instance().GetOne(IdRoboAccesorio);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdRoboAccesorio", IdRoboAccesorio));

            entity.PersonaPercato = PersonaPercato;
            entity.FechaPercato = FechaPercato;
            entity.DescripcionResponsable = DescripcionResponsable;
            entity.IdIncidencia = IdIncidencia;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert RoboAccesorios
        /// </summary>
        public void Insert(System.String PersonaPercato, System.DateTime FechaPercato, System.String DescripcionResponsable, System.Int32 IdIncidencia){
            Entities.RoboAccesorios entity = new Entities.RoboAccesorios();

            entity.PersonaPercato = PersonaPercato;
            entity.FechaPercato = FechaPercato;
            entity.DescripcionResponsable = DescripcionResponsable;
            entity.IdIncidencia = IdIncidencia;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class RoboAccesoriosLoader<T> : BaseLoader< T, RoboAccesorios, ObjectList<T>>, IGenericGateway where T : RoboAccesorios, new()
    {

        #region "Singleton"

        static RoboAccesoriosLoader<T> _instance;

        private RoboAccesoriosLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static RoboAccesoriosLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new RoboAccesoriosLoader<T>();
                else {
                    RoboAccesoriosLoader<T> inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboAccesoriosLoaderSingleton"] as RoboAccesoriosLoader<T>;
                    if (inst == null) {
                        inst = new RoboAccesoriosLoader<T>();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.RoboAccesoriosLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdRoboAccesorio"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(RoboAccesorios);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "RoboAccesorios"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, RoboAccesorios entity)
        {
            
            IMappeableRoboAccesoriosObject RoboAccesorios = (IMappeableRoboAccesoriosObject)entity;
            RoboAccesorios.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? "" : reader.GetString(1),
(reader.IsDBNull(2)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
reader.GetInt32(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "rb_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.IncidenciaObject IncidenciaEntity = null; // Lazy load
            ((IMappeableRoboAccesorios)entity).CompleteEntity(IncidenciaEntity);
        }


        



        /// <summary>
        /// Get a RoboAccesorios by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a RoboAccesoriosList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdRoboAccesorio)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_GetOne", IdRoboAccesorio);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(DbTransaction transaction, System.Int32 IdIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", IdIncidencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(DbTransaction transaction, IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(System.Int32 IdIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", IdIncidencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByIncidencia(IUniqueIdentifiable Incidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "RoboAccesorios_GetByIncidencia", Incidencia.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





