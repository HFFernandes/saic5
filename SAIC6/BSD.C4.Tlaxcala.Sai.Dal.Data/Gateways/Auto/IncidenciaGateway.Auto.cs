
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 8/31/2009 - 11:48 PM
// This is a partial class file. The other one is IncidenciaGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BSD.C4.Tlaxcala.Sai.Dal.Rules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace BSD.C4.Tlaxcala.Sai.Dal.Rules.Gateways
{

    public partial class IncidenciaGateway : BaseGateway<IncidenciaObject, IncidenciaObjectList>, IGenericGateway
    {

        #region "Singleton"

        static IncidenciaGateway _instance;

        private IncidenciaGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        
        
        public static IncidenciaGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new IncidenciaGateway();
                else {
                    IncidenciaGateway inst = HttpContext.Current.Items["BSD.C4.Tlaxcala.Sai.Dal.Rules.IncidenciaGatewaySingleton"] as IncidenciaGateway;
                    if (inst == null) {
                        inst = new IncidenciaGateway();
                        HttpContext.Current.Items.Add("BSD.C4.Tlaxcala.Sai.Dal.Rules.IncidenciaGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "Incidencia"; }
        }

        protected override string RuleName
        {
            get {return typeof(IncidenciaGateway).FullName;}
        }


        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, IncidenciaObject entity)
        {
            System.Byte[] _Imagen = new System.Byte[0]; if (!reader.IsDBNull(22)) _Imagen = reader.GetValue(22) as System.Byte[];

            IMappeableIncidenciaObject Incidencia = (IMappeableIncidenciaObject)entity;
            Incidencia.HydrateFields(
            reader.GetInt32(0),
(reader.IsDBNull(1)) ? new System.Nullable<System.Int32>() : reader.GetInt32(1),
reader.GetString(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
reader.GetString(4),
reader.GetDateTime(5),
(reader.IsDBNull(6)) ? new System.Nullable<System.Int32>() : reader.GetInt32(6),
(reader.IsDBNull(7)) ? new System.Nullable<System.Int32>() : reader.GetInt32(7),
(reader.IsDBNull(8)) ? new System.Nullable<System.Int32>() : reader.GetInt32(8),
(reader.IsDBNull(9)) ? new System.Nullable<System.Int32>() : reader.GetInt32(9),
(reader.IsDBNull(10)) ? new System.Nullable<System.Int32>() : reader.GetInt32(10),
(reader.IsDBNull(11)) ? "" : reader.GetString(11),
(reader.IsDBNull(12)) ? new System.Nullable<System.Int32>() : reader.GetInt32(12),
reader.GetInt32(13),
reader.GetInt32(14),
reader.GetBoolean(15),
(reader.IsDBNull(16)) ? new System.Nullable<System.Int32>() : reader.GetInt32(16),
(reader.IsDBNull(17)) ? new System.Nullable<System.Int32>() : reader.GetInt32(17),
(reader.IsDBNull(18)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(18),
(reader.IsDBNull(19)) ? "" : reader.GetString(19),
(reader.IsDBNull(20)) ? new System.Nullable<System.DateTime>() : reader.GetDateTime(20),
(reader.IsDBNull(21)) ? "" : reader.GetString(21),
_Imagen,
(reader.IsDBNull(23)) ? new System.Nullable<System.Int32>() : reader.GetInt32(23));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(IncidenciaObject entity)
        {

            IMappeableIncidenciaObject Incidencia = (IMappeableIncidenciaObject)entity;
            return Incidencia.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(IncidenciaObject entity)
        {

            IMappeableIncidenciaObject Incidencia = (IMappeableIncidenciaObject)entity;
            return Incidencia.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(IncidenciaObject entity)
        {

            IMappeableIncidenciaObject Incidencia = (IMappeableIncidenciaObject)entity;
            return Incidencia.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(IncidenciaObject row, object[] parameters)
        {
            ((IMappeableIncidenciaObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "in_";
        }


        /// <summary>
        /// Get a IncidenciaObject by execute a SQL Query Text
        /// </summary>
        public IncidenciaObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by execute a SQL Query Text
        /// </summary>
        public IncidenciaObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a IncidenciaObject by calling a Stored Procedure
        /// </summary>
        public IncidenciaObject GetOne(System.Int32 Folio)
        {
            return base.GetOne(new IncidenciaObject(Folio));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByCoordenada(DbTransaction transaction,System.Int32 ClaveCoordenada)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByCoordenada", ClaveCoordenada);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByCoordenada(DbTransaction transaction, IUniqueIdentifiable Coordenada)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByCoordenada", Coordenada.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByDenunciante(DbTransaction transaction,System.Int32 ClaveDenunciante)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByDenunciante", ClaveDenunciante);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByDenunciante(DbTransaction transaction, IUniqueIdentifiable Denunciante)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByDenunciante", Denunciante.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByEstatusIncidencia(DbTransaction transaction,System.Int32 ClaveEstatus)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByEstatusIncidencia", ClaveEstatus);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByEstatusIncidencia(DbTransaction transaction, IUniqueIdentifiable EstatusIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByEstatusIncidencia", EstatusIncidencia.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByTipoIncidencia(DbTransaction transaction,System.Int32 ClaveTipo)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByTipoIncidencia", ClaveTipo);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByTipoIncidencia(DbTransaction transaction, IUniqueIdentifiable TipoIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByTipoIncidencia", TipoIncidencia.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByUsuario(DbTransaction transaction,System.Int32 ClaveUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByUsuario", ClaveUsuario);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByUsuario(DbTransaction transaction, IUniqueIdentifiable Usuario)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_GetByUsuario", Usuario.Identifier());
        }

    

        

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByCoordenada(System.Int32 ClaveCoordenada)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByCoordenada", ClaveCoordenada);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByCoordenada(IUniqueIdentifiable Coordenada)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByCoordenada", Coordenada.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByDenunciante(System.Int32 ClaveDenunciante)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByDenunciante", ClaveDenunciante);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByDenunciante(IUniqueIdentifiable Denunciante)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByDenunciante", Denunciante.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByEstatusIncidencia(System.Int32 ClaveEstatus)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByEstatusIncidencia", ClaveEstatus);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByEstatusIncidencia(IUniqueIdentifiable EstatusIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByEstatusIncidencia", EstatusIncidencia.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByTipoIncidencia(System.Int32 ClaveTipo)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByTipoIncidencia", ClaveTipo);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByTipoIncidencia(IUniqueIdentifiable TipoIncidencia)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByTipoIncidencia", TipoIncidencia.Identifier());
        }

    

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByUsuario(System.Int32 ClaveUsuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByUsuario", ClaveUsuario);
        }

        /// <summary>
        /// Get a IncidenciaObjectList by calling a Stored Procedure
        /// </summary>
        public IncidenciaObjectList GetByUsuario(IUniqueIdentifiable Usuario)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Incidencia_GetByUsuario", Usuario.Identifier());
        }

    

        /// <summary>
        /// Delete Incidencia
        /// </summary>
        public void Delete(System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_Delete", Folio);
        }

        /// <summary>
        /// Delete Incidencia
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 Folio)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_Delete", Folio);
        }

            

        

        /// <summary>
        /// Delete Incidencia by Coordenada
        /// </summary>
        public void DeleteByCoordenada(System.Int32 ClaveCoordenada)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByCoordenada", ClaveCoordenada);
        }

        /// <summary>
        /// Delete Incidencia by Coordenada
        /// </summary>
        public void DeleteByCoordenada(DbTransaction transaction, System.Int32 ClaveCoordenada)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByCoordenada", ClaveCoordenada);
        }

        /// <summary>
        /// Delete Incidencia by Coordenada
        /// </summary>
        public void DeleteByCoordenada(IUniqueIdentifiable Coordenada)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByCoordenada", Coordenada.Identifier());
        }

        /// <summary>
        /// Delete Incidencia by Coordenada
        /// </summary>
        public void DeleteByCoordenada(DbTransaction transaction, IUniqueIdentifiable Coordenada)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByCoordenada", Coordenada.Identifier());
        }


    

        /// <summary>
        /// Delete Incidencia by Denunciante
        /// </summary>
        public void DeleteByDenunciante(System.Int32 ClaveDenunciante)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByDenunciante", ClaveDenunciante);
        }

        /// <summary>
        /// Delete Incidencia by Denunciante
        /// </summary>
        public void DeleteByDenunciante(DbTransaction transaction, System.Int32 ClaveDenunciante)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByDenunciante", ClaveDenunciante);
        }

        /// <summary>
        /// Delete Incidencia by Denunciante
        /// </summary>
        public void DeleteByDenunciante(IUniqueIdentifiable Denunciante)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByDenunciante", Denunciante.Identifier());
        }

        /// <summary>
        /// Delete Incidencia by Denunciante
        /// </summary>
        public void DeleteByDenunciante(DbTransaction transaction, IUniqueIdentifiable Denunciante)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByDenunciante", Denunciante.Identifier());
        }


    

        /// <summary>
        /// Delete Incidencia by EstatusIncidencia
        /// </summary>
        public void DeleteByEstatusIncidencia(System.Int32 ClaveEstatus)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByEstatusIncidencia", ClaveEstatus);
        }

        /// <summary>
        /// Delete Incidencia by EstatusIncidencia
        /// </summary>
        public void DeleteByEstatusIncidencia(DbTransaction transaction, System.Int32 ClaveEstatus)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByEstatusIncidencia", ClaveEstatus);
        }

        /// <summary>
        /// Delete Incidencia by EstatusIncidencia
        /// </summary>
        public void DeleteByEstatusIncidencia(IUniqueIdentifiable EstatusIncidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByEstatusIncidencia", EstatusIncidencia.Identifier());
        }

        /// <summary>
        /// Delete Incidencia by EstatusIncidencia
        /// </summary>
        public void DeleteByEstatusIncidencia(DbTransaction transaction, IUniqueIdentifiable EstatusIncidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByEstatusIncidencia", EstatusIncidencia.Identifier());
        }


    

        /// <summary>
        /// Delete Incidencia by TipoIncidencia
        /// </summary>
        public void DeleteByTipoIncidencia(System.Int32 ClaveTipo)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByTipoIncidencia", ClaveTipo);
        }

        /// <summary>
        /// Delete Incidencia by TipoIncidencia
        /// </summary>
        public void DeleteByTipoIncidencia(DbTransaction transaction, System.Int32 ClaveTipo)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByTipoIncidencia", ClaveTipo);
        }

        /// <summary>
        /// Delete Incidencia by TipoIncidencia
        /// </summary>
        public void DeleteByTipoIncidencia(IUniqueIdentifiable TipoIncidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByTipoIncidencia", TipoIncidencia.Identifier());
        }

        /// <summary>
        /// Delete Incidencia by TipoIncidencia
        /// </summary>
        public void DeleteByTipoIncidencia(DbTransaction transaction, IUniqueIdentifiable TipoIncidencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByTipoIncidencia", TipoIncidencia.Identifier());
        }


    

        /// <summary>
        /// Delete Incidencia by Usuario
        /// </summary>
        public void DeleteByUsuario(System.Int32 ClaveUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByUsuario", ClaveUsuario);
        }

        /// <summary>
        /// Delete Incidencia by Usuario
        /// </summary>
        public void DeleteByUsuario(DbTransaction transaction, System.Int32 ClaveUsuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByUsuario", ClaveUsuario);
        }

        /// <summary>
        /// Delete Incidencia by Usuario
        /// </summary>
        public void DeleteByUsuario(IUniqueIdentifiable Usuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Incidencia_DeleteByUsuario", Usuario.Identifier());
        }

        /// <summary>
        /// Delete Incidencia by Usuario
        /// </summary>
        public void DeleteByUsuario(DbTransaction transaction, IUniqueIdentifiable Usuario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Incidencia_DeleteByUsuario", Usuario.Identifier());
        }


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








