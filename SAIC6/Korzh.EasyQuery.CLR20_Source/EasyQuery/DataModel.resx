<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="opDateEqualPreciseFormat" xml:space="preserve">
    <value>{expr1} [[sea]] {expr2}</value>
  </data>
  <data name="opDateBeforeSpecialCaption" xml:space="preserve">
    <value>sea antes (fecha especial)</value>
  </data>
  <data name="opDateNotEqualPreciseFormat" xml:space="preserve">
    <value>{expr1} [[no sea]] {expr2}</value>
  </data>
  <data name="opLessThanCaption" xml:space="preserve">
    <value>sea menor que</value>
  </data>
  <data name="opNotContainsFormat" xml:space="preserve">
    <value>{expr1} [[no contenga]] {expr2}</value>
  </data>
  <data name="opNotStartsWithCaption" xml:space="preserve">
    <value>no empieze con</value>
  </data>
  <data name="opNotBetweenCaption" xml:space="preserve">
    <value>no este entre</value>
  </data>
  <data name="opGreaterOrEqualCaption" xml:space="preserve">
    <value>sea mayor que o igual a</value>
  </data>
  <data name="opIsNullFormat" xml:space="preserve">
    <value>{expr1} [[sea vacio]] </value>
  </data>
  <data name="opTimeNotEqualPreciseFormat" xml:space="preserve">
    <value>{expr1} [[no sea]] {expr2}</value>
  </data>
  <data name="opTimeAfterSpecialCaption" xml:space="preserve">
    <value>sea despues (tiempo especial)</value>
  </data>
  <data name="opMaximumOfAttrFormat" xml:space="preserve">
    <value>{expr1} [[sea igual al máximo de]] {expr2}</value>
  </data>
  <data name="opTimeNotEqualPreciseCaption" xml:space="preserve">
    <value>no sea (precisar tiempo)</value>
  </data>
  <data name="opDateEqualPreciseCaption" xml:space="preserve">
    <value>sea (precisar fecha)</value>
  </data>
  <data name="opLessOrEqualCaption" xml:space="preserve">
    <value>sea menor que o igual a</value>
  </data>
  <data name="opLessOrEqualFormat" xml:space="preserve">
    <value>{expr1} [[sea menor que o igual a]] {expr2}</value>
  </data>
  <data name="opNotStartsWithFormat" xml:space="preserve">
    <value>{expr1} [[no empieze con]] {expr2}</value>
  </data>
  <data name="opDateBeforeSpecialFormat" xml:space="preserve">
    <value>{expr1} [[sea antes]] {expr2}</value>
  </data>
  <data name="opEqualFormat" xml:space="preserve">
    <value>{expr1} [[sea igual a]] {expr2}</value>
  </data>
  <data name="opNotContainsCaption" xml:space="preserve">
    <value>no contenga</value>
  </data>
  <data name="opTimeBeforeSpecialCaption" xml:space="preserve">
    <value>sea despues (tiempo especial)</value>
  </data>
  <data name="opTimeAfterPreciseFormat" xml:space="preserve">
    <value>{expr1} [[sea despues]] {expr2}</value>
  </data>
  <data name="opDatePeriodPreciseFormat" xml:space="preserve">
    <value>{expr1} [[este entre]] {expr2} y {expr3}</value>
  </data>
  <data name="opTimeAfterSpecialFormat" xml:space="preserve">
    <value>{expr1} [[sea despues]] {expr2}</value>
  </data>
  <data name="opIsNullCaption" xml:space="preserve">
    <value>sea vacio</value>
  </data>
  <data name="opDatePeriodPreciseCaption" xml:space="preserve">
    <value>este entre</value>
  </data>
  <data name="opNotBetweenFormat" xml:space="preserve">
    <value>{expr1} [[no este entre]] {expr2} y {expr3}</value>
  </data>
  <data name="opTimeNotEqualSpecialCaption" xml:space="preserve">
    <value>no sea (tiempo especial)</value>
  </data>
  <data name="opStartsWithFormat" xml:space="preserve">
    <value>{expr1} [[empieze con]] {expr2}</value>
  </data>
  <data name="opDateNotEqualPreciseCaption" xml:space="preserve">
    <value>no sea (precisar fecha)</value>
  </data>
  <data name="opTimeBeforePreciseCaption" xml:space="preserve">
    <value>sea antes (precisar tiempo)</value>
  </data>
  <data name="opDateBeforePreciseFormat" xml:space="preserve">
    <value>{expr1} [[sea antes]] {expr2}</value>
  </data>
  <data name="opInListCaption" xml:space="preserve">
    <value>esta enlistado</value>
  </data>
  <data name="opTimeEqualSpecialCaption" xml:space="preserve">
    <value>sea (tiempo especial)</value>
  </data>
  <data name="opDateAfterPreciseCaption" xml:space="preserve">
    <value>sea despues (precisar fecha)</value>
  </data>
  <data name="opDateAfterSpecialFormat" xml:space="preserve">
    <value>{expr1} [[sea despues]] {expr2}</value>
  </data>
  <data name="opInListFormat" xml:space="preserve">
    <value>{expr1} [[esta enlistado]] {expr2}</value>
  </data>
  <data name="opTimeAfterPreciseCaption" xml:space="preserve">
    <value>sea despues (precisar tiempo)</value>
  </data>
  <data name="opNotEqualCaption" xml:space="preserve">
    <value>no sea igual a</value>
  </data>
  <data name="opTimePeriodPreciseFormat" xml:space="preserve">
    <value>{expr1} [[este entre]] {expr2} y {expr3}</value>
  </data>
  <data name="opDateEqualSpecialFormat" xml:space="preserve">
    <value>{expr1} [[sea]] {expr2}</value>
  </data>
  <data name="opDateNotEqualSpecialCaption" xml:space="preserve">
    <value>no sea (fecha especial)</value>
  </data>
  <data name="opMaximumOfAttrCaption" xml:space="preserve">
    <value>sea máximo de</value>
  </data>
  <data name="opDateAfterPreciseFormat" xml:space="preserve">
    <value>{expr1} [[sea despues]] {expr2}</value>
  </data>
  <data name="opDateNotEqualSpecialFormat" xml:space="preserve">
    <value>{expr1} [[no sea]] {expr2}</value>
  </data>
  <data name="opDateBeforePreciseCaption" xml:space="preserve">
    <value>sea antes (precisar fecha)</value>
  </data>
  <data name="opBetweenCaption" xml:space="preserve">
    <value>este entre</value>
  </data>
  <data name="opTimeBeforePreciseFormat" xml:space="preserve">
    <value>{expr1} [[sea antes]] {expr2}</value>
  </data>
  <data name="opNotInListCaption" xml:space="preserve">
    <value>no este enlistado</value>
  </data>
  <data name="opGreaterThanCaption" xml:space="preserve">
    <value>sea mayor que</value>
  </data>
  <data name="opNotInListFormat" xml:space="preserve">
    <value>{expr1} [[no este enlistado]] {expr2}</value>
  </data>
  <data name="opTimeBeforeSpecialFormat" xml:space="preserve">
    <value>{expr1} [[sea despues]] {expr2}</value>
  </data>
  <data name="opDateEqualSpecialCaption" xml:space="preserve">
    <value>sea (fecha especial)</value>
  </data>
  <data name="opLessThanFormat" xml:space="preserve">
    <value>{expr1} [[sea menor que]] {expr2}</value>
  </data>
  <data name="opTimePeriodPreciseCaption" xml:space="preserve">
    <value>este entre</value>
  </data>
  <data name="opStartsWithCaption" xml:space="preserve">
    <value>empieze con</value>
  </data>
  <data name="opTimeEqualPreciseFormat" xml:space="preserve">
    <value>{expr1} [[sea]] {expr2}</value>
  </data>
  <data name="opGreaterOrEqualFormat" xml:space="preserve">
    <value>{expr1} [[sea mayor que o igual a]] {expr2}</value>
  </data>
  <data name="opTimeEqualSpecialFormat" xml:space="preserve">
    <value>{expr1} [[sea]] {expr2}</value>
  </data>
  <data name="opTimeEqualPreciseCaption" xml:space="preserve">
    <value>sea (precisar tiempo)</value>
  </data>
  <data name="opTimeNotEqualSpecialFormat" xml:space="preserve">
    <value>{expr1} [[no sea]] {expr2}</value>
  </data>
  <data name="opBetweenFormat" xml:space="preserve">
    <value>{expr1} [[este entre]] {expr2} y {expr3}</value>
  </data>
  <data name="opContainsCaption" xml:space="preserve">
    <value>contenga</value>
  </data>
  <data name="opGreaterThanFormat" xml:space="preserve">
    <value>{expr1} [[sea mayor que]] {expr2}</value>
  </data>
  <data name="opNotEqualFormat" xml:space="preserve">
    <value>{expr1} [[no sea igual a]] {expr2}</value>
  </data>
  <data name="opContainsFormat" xml:space="preserve">
    <value>{expr1} [[contenga]] {expr2}</value>
  </data>
  <data name="opDateAfterSpecialCaption" xml:space="preserve">
    <value>sea despues (fecha especial)</value>
  </data>
  <data name="opEqualCaption" xml:space="preserve">
    <value>sea igual a</value>
  </data>
</root>